-- fetch all value from data1 table
SELECT * FROM DATA1;

-- fetch all value from data2 table
SELECT * FROM DATA2;

-- find number of rows into our datasets
SELECT COUNT(*) AS TOTAL_ROWS FROM DATA1;
SELECT COUNT(*) AS TOTAL_ROWS FROM DATA2;

-- find dataset for jharkhand and bihar
SELECT *
FROM DATA1
WHERE STATE IN ('Jharkhand', 'Bihar');

SELECT *
FROM DATA2
WHERE STATE IN ('Jharkhand', 'Bihar');

-- find population of India
SELECT SUM(POPULATION) AS INDIA_POPULATION
FROM DATA2;

-- find avg growth for india
SELECT (AVG(GROWTH)*100)::NUMERIC(10, 2) AS AVERAGE_INDIAN_GROWTH
FROM DATA1;

-- find avg growth for for each state
SELECT STATE, (AVG(GROWTH)*100)::NUMERIC(10,2) AS AVERAGE_GROWTH
FROM DATA1
GROUP BY STATE;

-- find avg sex ratio for india
SELECT ROUND(AVG(SEX_RATIO)) AS AVERAGE_SEX_RATIO
FROM DATA1;

-- find avg sex ratio for each state order the table highest to lowest value
SELECT STATE, ROUND(AVG(SEX_RATIO)) AS AVERAGE_SEX_RATIO
FROM DATA1
GROUP BY STATE
ORDER BY AVERAGE_SEX_RATIO DESC;

-- find avg literacy rate
SELECT AVG(LITERACY)::NUMERIC(10, 2) AS AVERAGE_LITERACY_RATE
FROM DATA1;

-- find avg literacy rate for each state where average literacy rate greater then 90
SELECT STATE, AVG(LITERACY)::NUMERIC(10, 2) AS AVERAGE_LITERACY_RATE
FROM DATA1
GROUP BY STATE
HAVING AVG(LITERACY) > 90;

-- find top 3 state showing highest growth ratio
SELECT STATE, AVG(GROWTH)::NUMERIC(10, 2) AS AVERAGE_GROWTH
FROM DATA1
GROUP BY STATE
ORDER BY AVERAGE_GROWTH DESC
LIMIT 3;

-- find bottom 3 state showing lowest sex ratio
SELECT STATE, ROUND(AVG(SEX_RATIO)) AS AVERAGE_SEX_RATIO
FROM DATA1
GROUP BY STATE
ORDER BY AVERAGE_SEX_RATIO ASC
LIMIT 3;

-- top and bottom 3 states in literacy state
(SELECT STATE, AVG(LITERACY)::NUMERIC(10, 2) AS AVERAGE_LITERACY_RATE
FROM DATA1
GROUP BY STATE
ORDER BY AVERAGE_LITERACY_RATE DESC
LIMIT 3)
UNION
(SELECT STATE, AVG(LITERACY)::NUMERIC(10, 2) AS AVERAGE_LITERACY_RATE
FROM DATA1
GROUP BY STATE
ORDER BY AVERAGE_LITERACY_RATE ASC
LIMIT 3)

-- TOP STATE TABLE CREATE
CREATE TABLE TOPSTATES
(
	STATE VARCHAR(250),
	TOPSTATE FLOAT
);

SELECT * FROM TOPSTATES;

INSERT INTO TOPSTATES
SELECT STATE, AVG(LITERACY)::NUMERIC(10, 2) AS AVERAGE_LITERACY_RATE
FROM DATA1
GROUP BY STATE
ORDER BY AVERAGE_LITERACY_RATE DESC;

-- BOTTOM STATES TABLE CREATE
CREATE TABLE BOTTOMSTATES
(
	STATE VARCHAR(250),
	BOTTOMSTATE FLOAT
);

SELECT * FROM BOTTOMSTATES;

INSERT INTO BOTTOMSTATES
SELECT STATE, AVG(LITERACY)::NUMERIC(10, 2) AS AVERAGE_LITERACY_RATE
FROM DATA1
GROUP BY STATE
ORDER BY AVERAGE_LITERACY_RATE ASC;

(SELECT * FROM TOPSTATES LIMIT 3)
UNION
(SELECT * FROM BOTTOMSTATES LIMIT 3);

-- find the states starting with letter a or starting with latter b
SELECT DISTINCT STATE
FROM DATA1
WHERE STATE LIKE 'A%' OR STATE LIKE 'B%';

SELECT DISTINCT STATE
FROM DATA1
WHERE LOWER(STATE) LIKE 'a%' OR LOWER(STATE) LIKE 'b%';

-- find the states starting with letter a or ending with latter m
SELECT DISTINCT STATE
FROM DATA1
WHERE LOWER(STATE) LIKE 'a%' OR LOWER(STATE) LIKE '%m';

-- find total males and females from the dataset based on states

SELECT Y.STATE, SUM(Y.MALES) AS TOTAL_MALES, SUM(Y.FEMALES) AS TOTAL_FEMALES, SUM(Y.POPULATION) AS TOTAL_POPULATION
FROM (SELECT X.DISTRICT, X.STATE, ROUND(X.POPULATION/(X.SEX_RATIO+1)) AS MALES, ROUND((X.POPULATION*X.SEX_RATIO)/(X.SEX_RATIO+1)) AS FEMALES, POPULATION
		FROM (SELECT
				A.DISTRICT,
				A.STATE,
				(CAST(SEX_RATIO AS DECIMAL)/1000)::NUMERIC(10, 4) SEX_RATIO,
				B.POPULATION
			FROM DATA1 AS A
			JOIN DATA2 AS B ON A.DISTRICT = B.DISTRICT) AS X) AS Y
GROUP BY Y.STATE;

-- find total literate, and illiterate people based on state
SELECT STATE, SUM(LITERATE_PEOPLE) AS TOTAL_LITERATE_PEOPLE, SUM(ILLITERATE_PEOPLE) AS TOTAL_ILLITERATE_PEOPLE, SUM(POPULATION) AS TOTAL_POPULATION
FROM (SELECT DISTRICT, STATE, ROUND(LITERACY_RATIO*POPULATION) AS LITERATE_PEOPLE, ROUND((1-LITERACY_RATIO)*POPULATION) AS ILLITERATE_PEOPLE, POPULATION
		FROM (SELECT A.DISTRICT, A.STATE, A.LITERACY/100 AS LITERACY_RATIO, B.POPULATION
				FROM DATA1 AS A
				INNER JOIN DATA2 AS B ON A.DISTRICT = B.DISTRICT) AS X) AS Y
GROUP BY STATE
ORDER BY STATE;

-- find population in previous censusa and current census based on state
SELECT D.STATE, SUM(D.PREVIOUS_CENSUS) PREVIOUS_CENSUS, SUM(D.CURRENT_CENSUS) CURRENT_CENSUS
FROM (SELECT C.DISTRICT, C.STATE, ROUND(C.POPULATION/(1+C.GROWTH)) AS PREVIOUS_CENSUS, C.POPULATION AS CURRENT_CENSUS
		FROM (SELECT A.DISTRICT, A.STATE, A.GROWTH, B.POPULATION
				FROM DATA1 AS A
				JOIN DATA2 AS B ON A.DISTRICT = B.DISTRICT) AS C) AS D
GROUP BY D.STATE
ORDER BY D.STATE;

-- find the total population in previous censusa and current census based on state
SELECT SUM(F.PREVIOUS_CENSUS) PREVIOUS_CENSUS, SUM(F.CURRENT_CENSUS) CURRENT_CENSUS
FROM (SELECT D.STATE, SUM(D.PREVIOUS_CENSUS) PREVIOUS_CENSUS, SUM(D.CURRENT_CENSUS) CURRENT_CENSUS
FROM (SELECT C.DISTRICT, C.STATE, ROUND(C.POPULATION/(1+C.GROWTH)) AS PREVIOUS_CENSUS, C.POPULATION AS CURRENT_CENSUS
		FROM (SELECT A.DISTRICT, A.STATE, A.GROWTH, B.POPULATION
				FROM DATA1 AS A
				JOIN DATA2 AS B ON A.DISTRICT = B.DISTRICT) AS C) AS D
GROUP BY D.STATE) AS F;


-- find previous censusa area per person and current census area per person based on state
SELECT TOTAL_AREA, PREVIOUS_CENSUS, (K.TOTAL_AREA/K.PREVIOUS_CENSUS)::NUMERIC(10, 4) PREVIOUS_CENSUS_AREA_PER_PERSON, CURRENT_CENSUS, (K.TOTAL_AREA/K.CURRENT_CENSUS)::NUMERIC(10, 4) CURRENT_CENSUS_AREA_PER_PERSON
FROM (SELECT I.*, J.TOTAL_AREA
		FROM (SELECT '1' AS KEY, G.*
				FROM (SELECT SUM(F.PREVIOUS_CENSUS) PREVIOUS_CENSUS, SUM(F.CURRENT_CENSUS) CURRENT_CENSUS
						FROM (SELECT D.STATE, SUM(D.PREVIOUS_CENSUS) PREVIOUS_CENSUS, SUM(D.CURRENT_CENSUS) CURRENT_CENSUS
						FROM (SELECT C.DISTRICT, C.STATE, ROUND(C.POPULATION/(1+C.GROWTH)) AS PREVIOUS_CENSUS, C.POPULATION AS CURRENT_CENSUS
								FROM (SELECT A.DISTRICT, A.STATE, A.GROWTH, B.POPULATION
										FROM DATA1 AS A
										JOIN DATA2 AS B ON A.DISTRICT = B.DISTRICT) AS C) AS D
						GROUP BY D.STATE) AS F) AS G) AS I
		JOIN (SELECT '1' AS KEY, H.*
				FROM (SELECT SUM(AREA_KM2) AS TOTAL_AREA FROM DATA2) AS H) AS J ON I.KEY = J.KEY) AS K;

-- find the top 3 districts from each state with highest literacy rate
SELECT A.*
FROM (SELECT DISTRICT, STATE, LITERACY,
		RANK() OVER(PARTITION BY STATE ORDER BY LITERACY DESC) AS RNK
		FROM DATA1) AS A
WHERE A.RNK <= 3;
